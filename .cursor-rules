# Kotlin 결제 시스템 - Cursor 규칙

## 프로젝트 구조
- 표준 Kotlin/Spring Boot 프로젝트 구조 준수
- 기능별 패키지 구조 사용
- 관련 파일들을 가까이 배치
- 최대 파일 길이: 300줄
- 최대 함수 길이: 50줄

## 명명 규칙
- 클래스: PascalCase
- 함수: camelCase
- 변수: camelCase
- 상수: UPPER_SNAKE_CASE
- 패키지: 소문자
- 테스트 클래스: PascalCase에 'Test' 접미사
- 테스트 함수: should_do_something_when_something 형식

## 코드 스타일
- 들여쓰기: 4칸 공백
- 최대 줄 길이: 120자
- 여러 줄 매개변수 목록에 후행 쉼표 사용
- 여러 줄 컬렉션 리터럴에 후행 쉼표 사용
- 여러 줄 열거형 항목에 후행 쉼표 사용
- 여러 줄 함수 인수에 후행 쉼표 사용

## 문서화
- 모든 공개 API 문서화
- KDoc 형식 사용
- @param, @return, @throws 태그 포함
- 복잡한 비즈니스 로직에 주석 추가
- 코드 변경 시 주석 업데이트

## 테스트
- 모든 비즈니스 로직에 대한 테스트 작성
- 설명적인 테스트 이름 사용
- AAA 패턴 준수 (Arrange, Act, Assert)
- 외부 의존성 모킹
- 85% 이상의 코드 커버리지 목표

## 에러 처리
- 비즈니스 로직 오류에 대한 커스텀 예외 사용
- 의미 있는 오류 메시지 포함
- 적절한 수준의 예외 로깅
- 체크된 예외 적절히 처리
- 오류 유형에 sealed 클래스 사용

## 보안
- 민감한 정보 로깅 금지
- 매개변수화된 쿼리 사용
- 모든 입력값 검증
- OWASP 보안 가이드라인 준수
- 안전한 비밀번호 해싱 사용

## 성능
- 적절한 데이터 구조 사용
- 데이터베이스 쿼리 최적화
- 커넥션 풀링 사용
- 적절한 캐싱 구현
- 메모리 사용량 모니터링

## Git 워크플로우
- 기능 브랜치 사용
- 의미 있는 커밋 메시지 작성
- 원자적 커밋 유지
- 병합 전 코드 리뷰
- 변경사항과 함께 문서 업데이트

## API 설계
- RESTful 원칙 준수
- 모든 API 버전 관리
- 적절한 HTTP 메서드 사용
- 적절한 HTTP 상태 코드 반환
- 모든 엔드포인트 문서화

## 의존성
- 의존성 최신 상태 유지
- 특정 버전 사용
- 의존성 목적 문서화
- 외부 의존성 최소화
- 보안 권고사항 검토

## 코드 리뷰 가이드라인
- 기능성 검토
- 보안 검토
- 성능 검토
- 유지보수성 검토
- 테스트 커버리지 검토

## 빌드 및 배포
- Maven을 사용한 빌드 관리
- CI/CD 파이프라인 구성
- 환경별 설정 사용
- 배포 프로세스 문서화
- 애플리케이션 상태 모니터링

## 로깅
- 적절한 로그 레벨 사용
- 로그 메시지에 컨텍스트 포함
- 구조화된 로깅 사용
- 로그 파일 순환
- 로그 패턴 모니터링

## 데이터베이스
- JPA 어노테이션 일관성 유지
- 엔티티 관계 최적화
- 적절한 인덱스 사용
- 명명 규칙 준수
- 스키마 변경 사항 문서화

## 설정
- application.yml을 사용한 설정
- 비밀 정보는 환경 변수 사용
- 설정 옵션 문서화
- 시작 시 설정 검증
- 타입 안전한 설정 사용

## 모니터링
- 헬스 체크 구현
- 애플리케이션 메트릭 모니터링
- 알림 설정
- 성능 메트릭 추적
- 오류율 모니터링 
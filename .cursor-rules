# Kotlin 결제 시스템 - Cursor 규칙

## 프로젝트 구조
- 표준 Kotlin/Spring Boot 프로젝트 구조 준수
- 기능별 패키지 구조 사용
- 관련 파일들을 가까이 배치
- 최대 파일 길이: 300줄
- 최대 함수 길이: 50줄

## 명명 규칙
- 클래스: PascalCase
- 함수: camelCase
- 변수: camelCase
- 상수: UPPER_SNAKE_CASE
- 패키지: 소문자
- 테스트 클래스: PascalCase에 'Test' 접미사
- 테스트 함수: should_do_something_when_something 형식

## 코드 스타일
- 들여쓰기: 4칸 공백
- 최대 줄 길이: 120자
- 여러 줄 매개변수 목록에 후행 쉼표 사용
- 여러 줄 컬렉션 리터럴에 후행 쉼표 사용
- 여러 줄 열거형 항목에 후행 쉼표 사용
- 여러 줄 함수 인수에 후행 쉼표 사용

## 문서화
- 모든 공개 API 문서화
- KDoc 형식 사용
- @param, @return, @throws 태그 포함
- 복잡한 비즈니스 로직에 주석 추가
- 코드 변경 시 주석 업데이트

## 테스트
- 모든 비즈니스 로직에 대한 테스트 작성
- 설명적인 테스트 이름 사용
- AAA 패턴 준수 (Arrange, Act, Assert)
- 외부 의존성 모킹
- 85% 이상의 코드 커버리지 목표

## 에러 처리
- 비즈니스 로직 오류에 대한 커스텀 예외 사용
- 의미 있는 오류 메시지 포함
- 적절한 수준의 예외 로깅
- 체크된 예외 적절히 처리
- 오류 유형에 sealed 클래스 사용

## 보안
- 민감한 정보 로깅 금지
- 매개변수화된 쿼리 사용
- 모든 입력값 검증
- OWASP 보안 가이드라인 준수
- 안전한 비밀번호 해싱 사용

## 성능
- 적절한 데이터 구조 사용
- 데이터베이스 쿼리 최적화
- 커넥션 풀링 사용
- 적절한 캐싱 구현
- 메모리 사용량 모니터링

## Git 워크플로우
- 기능 브랜치 사용
- 의미 있는 커밋 메시지 작성
- 원자적 커밋 유지
- 병합 전 코드 리뷰
- 변경사항과 함께 문서 업데이트

## API 설계
- RESTful 원칙 준수
- 모든 API 버전 관리
- 적절한 HTTP 메서드 사용
- 적절한 HTTP 상태 코드 반환
- 모든 엔드포인트 문서화

## 의존성
- 의존성 최신 상태 유지
- 특정 버전 사용
- 의존성 목적 문서화
- 외부 의존성 최소화
- 보안 권고사항 검토

## 코드 리뷰 가이드라인
- 기능성 검토
- 보안 검토
- 성능 검토
- 유지보수성 검토
- 테스트 커버리지 검토

## 빌드 및 배포
- Maven을 사용한 빌드 관리
- CI/CD 파이프라인 구성
- 환경별 설정 사용
- 배포 프로세스 문서화
- 애플리케이션 상태 모니터링

## 로깅
- 적절한 로그 레벨 사용
- 로그 메시지에 컨텍스트 포함
- 구조화된 로깅 사용
- 로그 파일 순환
- 로그 패턴 모니터링

## 데이터베이스
- JPA 어노테이션 일관성 유지
- 엔티티 관계 최적화
- 적절한 인덱스 사용
- 명명 규칙 준수
- 스키마 변경 사항 문서화

## 설정
- application.yml을 사용한 설정
- 비밀 정보는 환경 변수 사용
- 설정 옵션 문서화
- 시작 시 설정 검증
- 타입 안전한 설정 사용

## 모니터링
- 헬스 체크 구현
- 애플리케이션 메트릭 모니터링
- 알림 설정
- 성능 메트릭 추적
- 오류율 모니터링

# 커밋 전 확인사항
- [ ] 코드 스타일 및 포맷팅
  - [ ] Kotlin 코딩 컨벤션 준수 여부
  - [ ] 들여쓰기 일관성
  - [ ] 불필요한 공백 제거
  - [ ] 파일 끝 개행 확인
  - [ ] 한글 주석 인코딩 확인

- [ ] 코드 품질
  - [ ] 컴파일 에러 없음
  - [ ] 테스트 코드 실행 및 통과
  - [ ] 코드 중복 제거
  - [ ] 불필요한 임포트 제거
  - [ ] 미사용 변수/메서드 제거
  - [ ] 매직 넘버/문자열 상수화

- [ ] 보안
  - [ ] 민감 정보 노출 여부
  - [ ] 하드코딩된 비밀번호/키 제거
  - [ ] SQL 인젝션 취약점
  - [ ] XSS 취약점
  - [ ] CSRF 보호 확인

- [ ] 성능
  - [ ] N+1 문제 해결
  - [ ] 불필요한 DB 쿼리 최적화
  - [ ] 메모리 누수 가능성
  - [ ] 비동기 처리 적절성

- [ ] 문서화
  - [ ] API 문서 업데이트
  - [ ] README 업데이트
  - [ ] 코드 주석 보완
  - [ ] 변경사항 설명 추가

# 커밋 포인트
- [ ] 기능 단위
  - [ ] 새로운 기능 추가
  - [ ] 기존 기능 수정
  - [ ] 버그 수정
  - [ ] 리팩토링

- [ ] 테스트
  - [ ] 단위 테스트 추가
  - [ ] 통합 테스트 추가
  - [ ] 테스트 케이스 보완

- [ ] 문서
  - [ ] API 문서 업데이트
  - [ ] README 업데이트
  - [ ] 주석 추가/수정

- [ ] 설정
  - [ ] 의존성 추가/수정
  - [ ] 설정 파일 변경
  - [ ] 환경 변수 추가/수정

- [ ] 보안
  - [ ] 보안 취약점 수정
  - [ ] 인증/인가 로직 변경
  - [ ] 암호화 관련 변경

# 커밋 메시지 규칙
- [ ] 제목
  - [ ] 타입: 기능(feat), 수정(fix), 문서(docs), 스타일(style), 리팩토링(refactor), 테스트(test), 설정(chore)
  - [ ] 영문 소문자로 시작
  - [ ] 현재형 시제 사용
  - [ ] 50자 이내로 작성

- [ ] 본문
  - [ ] 변경사항 상세 설명
  - [ ] 변경 이유 설명
  - [ ] 관련 이슈 번호 참조

- [ ] 꼬리말
  - [ ] Breaking Changes 명시
  - [ ] 관련 이슈 닫기
  - [ ] 리뷰어 태그

# 브랜치 전략
- [ ] 브랜치 명명 규칙
  - [ ] feature/기능명
  - [ ] bugfix/버그명
  - [ ] hotfix/긴급수정명
  - [ ] release/버전명

- [ ] 브랜치 관리
  - [ ] main 브랜치 보호
  - [ ] PR 필수
  - [ ] 리뷰 승인 필수
  - [ ] CI 통과 필수

# 코드 리뷰 체크리스트
- [ ] 기능
  - [ ] 요구사항 충족
  - [ ] 예외 처리
  - [ ] 에러 메시지

- [ ] 코드 품질
  - [ ] 가독성
  - [ ] 유지보수성
  - [ ] 테스트 용이성

- [ ] 보안
  - [ ] 인증/인가
  - [ ] 데이터 검증
  - [ ] 보안 취약점

- [ ] 성능
  - [ ] 응답 시간
  - [ ] 리소스 사용
  - [ ] 확장성

# TDD 개발 규칙
## 테스트 주도 개발 프로세스
- [ ] Red 단계
  - [ ] 실패하는 테스트 작성
  - [ ] 테스트의 의도 명확히 표현
  - [ ] 테스트 케이스 문서화
  - [ ] 테스트 실패 확인

- [ ] Green 단계
  - [ ] 최소한의 코드로 테스트 통과
  - [ ] 빠른 구현 우선
  - [ ] 임시 구현 허용
  - [ ] 테스트 통과 확인

- [ ] Refactor 단계
  - [ ] 코드 중복 제거
  - [ ] 설계 개선
  - [ ] 가독성 향상
  - [ ] 테스트 유지

## 테스트 작성 규칙
- [ ] 테스트 구조
  - [ ] Given-When-Then 패턴 사용
  - [ ] 각 테스트는 하나의 시나리오만 검증
  - [ ] 테스트 이름은 동작 중심으로 작성
  - [ ] 테스트 데이터는 명확하게 설정

- [ ] 테스트 범위
  - [ ] 모든 비즈니스 로직에 대한 테스트
  - [ ] 경계 조건 테스트
  - [ ] 예외 상황 테스트
  - [ ] 통합 테스트 시나리오

- [ ] 테스트 격리
  - [ ] 각 테스트는 독립적으로 실행
  - [ ] 외부 의존성은 모킹
  - [ ] 테스트 데이터는 각 테스트마다 초기화
  - [ ] 테스트 간 상태 공유 금지

## TDD 커밋 규칙
- [ ] 커밋 단위
  - [ ] 각 테스트 케이스별 커밋
  - [ ] 리팩토링 단계별 커밋
  - [ ] 기능 구현 완료 시 커밋

- [ ] 커밋 메시지
  - [ ] 테스트 추가: "test: [기능명] 테스트 추가"
  - [ ] 구현: "feat: [기능명] 구현"
  - [ ] 리팩토링: "refactor: [기능명] 리팩토링"

## TDD 개발 순서
1. [ ] 도메인 모델 테스트 작성
   - [ ] 엔티티 유효성 검증
   - [ ] 비즈니스 규칙 검증
   - [ ] 도메인 이벤트 테스트

2. [ ] 서비스 레이어 테스트 작성
   - [ ] 비즈니스 로직 검증
   - [ ] 트랜잭션 처리 검증
   - [ ] 예외 처리 검증

3. [ ] 컨트롤러 레이어 테스트 작성
   - [ ] API 엔드포인트 검증
   - [ ] 요청/응답 처리 검증
   - [ ] 인증/인가 검증

4. [ ] 통합 테스트 작성
   - [ ] 전체 흐름 검증
   - [ ] 외부 시스템 연동 검증
   - [ ] 성능 요구사항 검증

## TDD 품질 관리
- [ ] 테스트 커버리지
  - [ ] 라인 커버리지 90% 이상
  - [ ] 브랜치 커버리지 85% 이상
  - [ ] 커버리지 리포트 생성
  - [ ] 미달성 영역 분석

- [ ] 테스트 품질
  - [ ] 테스트 가독성
  - [ ] 테스트 유지보수성
  - [ ] 테스트 실행 속도
  - [ ] 테스트 안정성

- [ ] 리팩토링 품질
  - [ ] 코드 중복 제거
  - [ ] 설계 패턴 적용
  - [ ] 성능 최적화
  - [ ] 가독성 향상 